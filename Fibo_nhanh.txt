#include <iostream>
#include <map>
#include <vector>
using namespace std;
typedef long long ll;
typedef vector<ll> vll;
struct VecLL
{
	vll A;
	VecLL()
	{
		A.push_back(0);
	}
};
map<long long, VecLL> F;
#define MAX 1000000000

void Init()
{
	vll temp = { 1 };
	F[0].A = F[1].A = temp;
}
vll temp1 = { 0 };
vll ADD_LargeInt(vll a, vll b)
{
	vll C;
	while (a.size() < b.size())
		a.insert(a.begin(), 0);
	while (a.size() > b.size())
		b.insert(b.begin(), 0);
	C.resize(a.size());
	int len = a.size();
	long long nho = 0;
	for (int i = 0; i < len; i++)
	{
		C[i] = (a[i] + b[i] + nho) % MAX;
		nho = (a[i] + b[i] + nho) / MAX;
	}
	
	if (nho)
		C.push_back(nho);
	return C;
}
vll Fib_QHD(int n)
{
	if (F[n].A != temp1)
	{
		return F[n].A;
	}
	else {
		F[n].A = ADD_LargeInt(Fib_QHD(n-2), Fib_QHD(n-1));
	}
	return F[n].A;
}

void PrintVEC(vll A)
{
	for(int i = 0; i < A.size(); i++)
	{
		cout << A[i];
	}
}

int main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);
	int n;
	cin >> n;
	Init();
	for (int i = 1; i <= n; i++)
	{
		vll A = Fib_QHD(i - 1);
		PrintVEC(A);
		cout << " ";
	}
	//A[A.size() - 1]--;
		return 0;
}