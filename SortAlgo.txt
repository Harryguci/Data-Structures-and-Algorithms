
// Sap xep noi bot
int* bubleSort(int* arr, int n) {
	for (int i = 0; i < n; i++) {
		for (int j = n - 1; j > i; j--) {
			if (arr[i] > arr[j]) { 
				swap(arr[i], arr[j]);
			}
		}
	}
	return arr;
}

// Chen arr[j] vao day arr[1], arr[2], ... arr[j - 1]
int* insertionSort(int* arr, int n) {
	for (int i = 1; i < n; i++) {
		int j = i - 1;
		int key = arr[i];
		while (j >= 0 && arr[j] > key) {
			arr[j + 1] = arr[j];
			j--;
		}
		arr[j + 1] = key;
	}
	return arr;
}

// Tim phan tu nho nhat dua ve vi tri dau
int* selectionSort(int* arr, int n) {
	int minID;

	for (int i = 0; i < n - 1; i++) {
		minID = i;
		for (int j = i + 1; j < n; j++) {
			if (arr[j] < arr[minID]) minID = j;
		}
		
		if (minID != i) swap(arr[minID], arr[i]);
	}
	return arr;
}

// Binary Search
int binarySearch(int* arr, int n, int value) {
	int l = 0;
	int r = n - 1;
	while (l < r) {
		int mid = (l + r) / 2;

		if (arr[mid] == value) return mid;
		else if (arr[mid] < value) {
			l = mid + 1;
		}
		else
			r = mid - 1;
	}
	return -1;
}

// Merge Sort (sap xep tron)
void mergeSort(int* arr, int l, int r) {
	if (l < r) {
		int mid = (l + r) / 2;
		mergeSort(arr, l, mid);
		mergeSort(arr, mid + 1, r);
		merge(arr, l, mid, r);
	}
}
